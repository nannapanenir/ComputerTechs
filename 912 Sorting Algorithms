/**
 * @param {number[]} nums
 * @return {number[]}
 * 
Selection sort, it is a pattern ,we should practice them to get it understand, or whenever some one asked them.
 */
var sortArray = function(nums) {

   for(let i=0;i<nums.length;i++){
    let min_index=i;
    for(let j=i+1;j<nums.length;j++){
             if(nums[j]<nums[min_index]){
                 min_index=  j;            
            }
    }
    swap(i,min_index,nums); 
   }
    return nums;
};

function swap(i,j,nums){
    let temp=nums[i];
    nums[i]=nums[j];
    nums[j]=temp;
}


/**
 * @param {number[]} nums
 * @return {number[]}
 * 
Insertion Sort is a simple, efficient, and stable sorting algorithm that works by dividing the input into a sorted and an unsorted region. Each subsequent element from the unsorted region is inserted into the sorted region at its correct position.
How Insertion Sort Works
Initialize: Start with the first element as the sorted region.
Iterate: Iterate through the remaining elements in the unsorted region.
Insert: For each element, compare it with the elements in the sorted region and insert it at its correct position.
Repeat: Repeat steps 2-3 until the entire list is sorted.
Example Walkthrough
Suppose we have the following list:
[5, 2, 8, 3, 1]
Here's how Insertion Sort would sort this list:
Initial: [5] (sorted), [2, 8, 3, 1] (unsorted)
Insert 2: [2, 5] (sorted), [8, 3, 1] (unsorted)
Insert 8: [2, 5, 8] (sorted), [3, 1] (unsorted)
Insert 3: [2, 3, 5, 8] (sorted), [1] (unsorted)
Insert 1: [1, 2, 3, 5, 8] (sorted)
Time and Space Complexity
Best-case: O(n) when the input is already sorted.
Average-case: O(n^2) for random inputs.
Worst-case: O(n^2) when the input is reverse-sorted.
Space complexity: O(1) since we only use a constant amount of additional memory.
Advantages and Disadvantages
Advantages:
Simple to implement: Insertion Sort has a simple and intuitive implementation.
Efficient for small inputs: Insertion Sort performs well for small inputs.
Stable: Insertion Sort preserves the relative order of equal elements.
Disadvantages:
Inefficient for large inputs: Insertion Sort has a high time complexity for large inputs.
Not suitable for real-time data: Insertion Sort is not suitable for real-time data due to its high time complexity.
Use Cases
Small datasets: Insertion Sort is suitable for small datasets where simplicity and efficiency are important.
Nearly sorted data: Insertion Sort performs well on nearly sorted data.
Educational purposes: Insertion Sort is often taught in introductory programming courses due to its simplicity. 
 */
var insertion_sort = function(nums) {

   for(let i=1;i<nums.length;i++){
    for(let j=i;j>=0;j--){
             if(nums[j-1]>nums[j]){
                swap(j-1,j,nums);                
            }else{break;}
    }
   }
    return nums;
};
/**
 * @param {number[]} nums
 * @return {number[]}
 * Initially let's solve it using bubble sort algorithm, where we actually move each gaterelement to end.
   this solution does't work under this question.
 */
var bubble_sort = function(nums) {

    let flag=true;
    while (flag){
        flag=false;
        for(let i=1;i<nums.length;i++){

            if(nums[i-1]>nums[i]){
                swap(i-1,i,nums);
                flag=true;
            }
        }
    }

    return nums;
};


