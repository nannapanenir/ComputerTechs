/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 when finding the linked list cycle's we needs to look for the  Floyd's Cycle Finding Algorithm , it takes two pointer's fast and slow 
 fast walks twice as fast as slow, slow walks one step at a time.

 Hence we can reduce the space complexity to constant space O(1)
 */

/**
 * @param {ListNode} head
 * @return {boolean}
 */
var hasCycle = function(head) {        
    let slow=head;
    let fast=head;
    
    while(fast && fast.next){
      
        slow=slow.next;
        fast=fast.next.next;

          if(slow==fast){
            return true;
        }
    }
    return false;
};

/**
 * @param {ListNode} head
 * @return {boolean}
 */
var hasCycle = function(head) {
   let nodesSeen = new Set();
    
    let current=head;
    while(current!=null){
        if (nodesSeen.has(current)) {
            return true;
        }
        nodesSeen.add(current);
        current=current.next;
    }
    return false;
};

